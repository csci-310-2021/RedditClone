{"ast":null,"code":"var _jsxFileName = \"/Users/tailes/Desktop/CSCI310/RedditClone/redditclone/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n/*\nHere are the features it should have:\n\n• Display the number of votes\n• Functioning Upvote and Downvote controls\n• Display the number of comments\n• Other links do not need to be functional (share, save, hide, etc.)\n\n \n\nReddit’s API is public and you don’t need a key. You can use static data from e.g. http://www.reddit.com/r/reactjs.json\n\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst baseUrl = \" http://www.reddit.com/r/reactjs.json\";\n\nfunction Voting(post) {\n  let score = post.post.post.data.score;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Down\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n\n_c = Voting;\n\nfunction PostDisplay(post) {\n  //console.log(post.post.data.url)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: [/*#__PURE__*/_jsxDEV(Voting, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: post.post.data.url,\n        children: post.post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_c2 = PostDisplay;\n\nfunction App() {\n  _s();\n\n  const [posts, setPosts] = useState();\n  const [numPosts, setNumPosts] = useState(0);\n  const tempPost = {\n    title: \"yo\"\n  }; //setPosts(tempPost)\n\n  const handleClick = () => {\n    axios.get(baseUrl).then(response => {\n      setPosts(response.data.data.children.sort((a, b) => {\n        return b.data.score - a.data.score;\n      }));\n      setNumPosts(response.data.data.dist);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Fetch Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), posts !== undefined ? posts.map(post => /*#__PURE__*/_jsxDEV(PostDisplay, {\n      post: post\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 51\n    }, this)) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"rmeCRxPCo82e8VnWMPkhKyeg9mA=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Voting\");\n$RefreshReg$(_c2, \"PostDisplay\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/tailes/Desktop/CSCI310/RedditClone/redditclone/src/App.js"],"names":["React","useState","useEffect","axios","baseUrl","Voting","post","score","data","PostDisplay","url","title","App","posts","setPosts","numPosts","setNumPosts","tempPost","handleClick","get","then","response","children","sort","a","b","dist","undefined","map"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,OAAO,GAAG,uCAAhB;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAIC,KAAK,GAAGD,IAAI,CAACA,IAAL,CAAUA,IAAV,CAAeE,IAAf,CAAoBD,KAAhC;AACA,sBACE;AAAA,2BACC;AAAA,8BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,eAEG;AAAA,kBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA,cAFH,eAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AADD,mBADF;AASD;;KAXQF,M;;AAaT,SAASI,WAAT,CAAqBH,IAArB,EAA2B;AACzB;AACA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAEA;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAG,QAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE,IAAV,CAAeE,GAAxB;AAAA,kBAA8BJ,IAAI,CAACA,IAAL,CAAUE,IAAV,CAAeG;AAA7C;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AASD;;MAXQF,W;;AAaT,SAASG,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,EAAlC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,CAAD,CAAxC;AAEA,QAAMgB,QAAQ,GAAG;AACfN,IAAAA,KAAK,EAAE;AADQ,GAAjB,CAJa,CAOb;;AAEA,QAAMO,WAAW,GAAG,MAAM;AACxBf,IAAAA,KAAK,CAACgB,GAAN,CAAUf,OAAV,EAAmBgB,IAAnB,CAAyBC,QAAD,IAAc;AACtCP,MAAAA,QAAQ,CAAEO,QAAQ,CAACb,IAAT,CAAcA,IAAd,CAAmBc,QAApB,CAA8BC,IAA9B,CAAmC,CAACC,CAAD,EAAGC,CAAH,KAAS;AAAE,eAAOA,CAAC,CAACjB,IAAF,CAAOD,KAAP,GAAeiB,CAAC,CAAChB,IAAF,CAAOD,KAA7B;AAAmC,OAAjF,CAAD,CAAR;AACAS,MAAAA,WAAW,CAACK,QAAQ,CAACb,IAAT,CAAcA,IAAd,CAAmBkB,IAApB,CAAX;AACD,KAHC;AAIH,GALC;;AAOA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAER,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGL,KAAK,KAAIc,SAAT,GAAsBd,KAAK,CAACe,GAAN,CAAWtB,IAAD,iBAAW,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEA;AAAnB;AAAA;AAAA;AAAA;AAAA,YAArB,CAAtB,GAA4E,IAF/E;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAtBQM,G;;MAAAA,G;AAwBT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport React, {useState, useEffect} from 'react'\nimport axios from 'axios'\n/*\nHere are the features it should have:\n\n• Display the number of votes\n• Functioning Upvote and Downvote controls\n• Display the number of comments\n• Other links do not need to be functional (share, save, hide, etc.)\n\n \n\nReddit’s API is public and you don’t need a key. You can use static data from e.g. http://www.reddit.com/r/reactjs.json\n\n\n*/\n\nconst baseUrl = \" http://www.reddit.com/r/reactjs.json\"\n\nfunction Voting(post) {\n  let score = post.post.post.data.score\n  return (\n    <>\n     <div>\n        <button>Up</button>\n        <span>{score}</span>\n        <button>Down</button>\n      </div>\n    </>\n  )\n}\n\nfunction PostDisplay(post) {\n  //console.log(post.post.data.url)\n  return (\n    <>\n      <div className=\"display\">\n        <Voting post={post}/>\n        <a href={post.post.data.url}>{post.post.data.title}</a>\n        <br/>\n      </div>\n    </>\n  )\n}\n\nfunction App() {\n  const [posts, setPosts] = useState()\n  const [numPosts, setNumPosts] = useState(0)\n\n  const tempPost = {\n    title: \"yo\"\n  }\n  //setPosts(tempPost)\n\n  const handleClick = () => {\n    axios.get(baseUrl).then((response) => {\n    setPosts((response.data.data.children).sort((a,b) => { return b.data.score - a.data.score}))\n    setNumPosts(response.data.data.dist)\n  })\n}\n\n  return (\n    <div>\n      <button onClick={handleClick}>Fetch Posts</button>\n      {posts!== undefined ? (posts.map((post) => (<PostDisplay post={post}/>))) : (null)}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}